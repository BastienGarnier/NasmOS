Initialisation :

	dl : contient l'unité de boot (voir Internet)

	Interruptions BIOS :
		- int 0x13 : Gestionnaire de disque : https://en.wikipedia.org/wiki/INT_13H
			- AH : 0x2 : lecture de secteurs de disque
				ENTREE :
				- AL : nombre de secteurs à lire (> 0)
				- CX :
					- 10 premiers bits : numéro de cylindre
					- 6 derniers bits : numéro de secteur
				- DH : numéro de tête de lecture/écriture
				- DL : unité de boot (déjà chargé au lancement de l'ordi)
				- (ES:BX) : adresse logique réelle (voir ci-dessous) de la RAM où charger les données
				SORTIE :
				- CF = 1 : erreur, CF = 0 : pas d'erreur
				- AH contient alors le code d'erreur :
					00h		pas d'erreur
					01h		le numéro de la fonction est invalide
					02h 	la marque d'adresse introuvable
					03h 	une tentative d'écriture sur l'unité de disque protégée contre l'écriture
					04h 	un secteur appelé introuvable
					05h 	un échec de réinitialisation
					06h 	une disquette absente
					07h 	une mauvaise table de paramètres
					08h 	un débordement DMA
					09h 	un transfert de données par-delà la limite de segment
					0Ah 	un secteur défectueux
					0Bh 	une piste défectueux
					0Ch 	un type de média introuvable
					0Dh 	un nombre de secteur invalides
					0Eh 	une marque de contrôle détectée
					0Fh 	un niveau de DMA interdit
					10h 	une erreur de lecture ou d'ECC
					11h 	une erreur CRC corrigée
					20h 	une erreur sur le contrôleur de disque
					40h 	une piste introuvable
					80h 	une erreur de dépassement de délai ou de lecture ne réagissant pas
					AAh 	une unité pas prête
					BBh 	une erreur indéfinie
					CCh 	une erreur d'écriture
					E0h 	une erreur dans le registre d'état
					FFh 	une échec de l'opération demandant l'état
		- int 0x10 : Gestionnaire de l'affichage vidéo
			- AH : 0x0E : Ecriture d'un caractère en mode télétype
				ENTREE :
				- AL : Le caractère en ASCII
				- BH : numéro de page
				- BL : la couleur d'écriture
				SORTIE : AUCUNE


Chargement du noyau :
	ds : sélecteur de segment de données
	cs : sélecteur de segment de code
	ss : sélecteur de segment de pile
	es, fs et gs : sélecteurs de segments généraux

	En mode Réel :
		ds : pointeur vers le Data Segment du programme 
		cs : pointeur vers le Code Segment du programme 
		ss : pointeur vers le Stack Segment du programme (sélecteur de segment de pile)

		Adressage logique : (sélecteur de segment * 16) + offset
		Exemple : 8000:f000 = 0x8000 * 0x10 + 0xf000

		Adressage linéaire : (segment << 4)+offset

	En mode protégé :
		Les sélecteurs de segments pointent vers un descripteur de segment stocké dans la GDT (Global Descriptor Table). Cette table a son adresse stockée dans le registre GDTR
		Chaque descripteur de segment précise :
			- Sa base : l'endroit en mémoire où commence le segment
			- Sa limite : la taille du segment exprimée en octets ou en blocs de 4Ko
			- Son type : Code, Data, Stack, autre...

		La taille de la GDT est aussi appelée sa "limite".
		Chaque descripteur est décrit sur 64 bits (8 octets).
		La GDT contient au moins un descripteur NULL : 0x0000000000000000

		La limite d'un descripteur est codée sur 20 bits.
		La base d'un descripteur est codée sur 32 bits
		Structure générale d'un descripteur :
			- Octets 1 et 2 : premiers 16 bits de la limite
			- Octets 3 et 4 : premiers 16 bits de la base
			- Octet 5 : 8 bits suivant de la base
			- Octet 6 :
				- 4 premiers bits
					- bit P : P = 1 si le segment est présent en mémoire physique, P = 0 sinon
					- 2 bits de DPL : indique le niveau de privilège du segment (0 <=> super-utilisateur)
					- bit S : S = 1 s'il s'agit d'un descripteur de segment, S = 0 s'il s'agit d'un descripteur système (?)
				- 4 deniers bits : type du segment et droits d'accès
					Le type définit le type de segment (code, données ou pile)
					- bit 1 : = 0 <=> segment de données, 1 => code
					- bit 2, 3 et 4 dépendant du type :
						Code :
							- bit C : si le segment est "conformant" ou non. Le code d'un segment conformant peut être appelé depuis des niveaux moins privilégiés (ex : utilisateur)
							- bit R : le segment, en plus d'etre accessible en execution est accessible en lecture
							- bit A : mis à 1 par le processeur quand utilisé
						Données :
							- bit E : indique le sens d'expansion des données. Vaut 1 quand de type "pile", vers le début de la mémoire, 0 sinon
							- bit W : W = 1 <=> le segment est accessible en écriture (en plus de lecture)
							- bit A : mis à 1 par le processeur quand utilisé
			- Octet 7 :
				- 4 premiers bits :
					- bit G : G = 0 => limite en octets, G = 1 => limite en nombre de pages de 4Ko
					- bit D/B : taille des instructions et des données. Pour du 32 bits, D/B = 1
					- vaut 0
					- bit AVL : librement disponible
				- 4 derniers bits : derniers 4 bits de la limite
			- Octet 8 : derniers 8 bits de la base

	Pour passer en mode protégé :

		Calcul de la limite de la GDT, et calcul de sa base en adresse linéaire. On stocke dans une structure :
			gdtptr:
				dw ... ; Limite
				dd ... ; Adresse linéaire de la base

		Passage effectif en mode protégé :
			- Mise à 1 du registre cr0 (qui est sur 32 bits donc passer par un registre général de 32 bits)

		Instructions :
			- cli : inhibe les interruptions (en passage en mode protégé, comme le mode d'adressage change, les routines appelées par les interruptions ne seront plus valides)
			- lgdt <CONTENU DE LA STRUCTURE DE GDT AVEC LIMITE ET BASE> : 
				Exemple : lgdt [gdtptr]